    #!/bin/bash
    ORG_NAME="xx"
    OUTPUT_CSV="dependabot_alerts.csv"
    TOKEN="<your_github_token_here>"
    
    if ! command -v jq &> /dev/null
    then
        echo "jq could not be found, please install jq to continue."
        exit 1
    fi

    # Initialize the CSV file with the header
    echo "number,CVE_ID,url,repo_name,severity" > "$OUTPUT_CSV"

    # Function to fetch data from the GitHub API
    fetch_data() {
      local url=$1
      response=$(curl -s -H "Authorization: token $TOKEN" -H "Accept: application/vnd.github+json" "$url")
      if [[ $? -ne 0 ]]; then
        echo "Error fetching data from $url" >&2
        return 1
      fi
      echo "$response"
    }

    # Function to fetch all pages of repository data
    fetch_all_repos() {
      local page=1
      local per_page=100
      local repos=()

      while :; do
        response=$(fetch_data "https://api.github.com/orgs/${ORG_NAME}/repos?per_page=${per_page}&page=${page}")
        if [[ $? -ne 0 ]]; then
          echo "Error fetching repositories" >&2
          return 1
        fi

        repo_names=$(echo "$response" | jq -r '.[].name')

        if [[ -z "$repo_names" ]]; then
          break
        fi

        repos+=($repo_names)
        ((page++))
      done

      echo "${repos[@]}"
    }

    # Fetch the list of repositories from the organization
    REPOS=$(fetch_all_repos)
    if [[ $? -ne 0 ]]; then
      echo "Failed to fetch repositories." >&2
      exit 1
    fi

    # Function to fetch all pages of Dependabot alerts for a repository
    fetch_all_alerts() {
      local repo=$1
      local page=1
      local per_page=100
      local alerts=()

      while :; do
        response=$(fetch_data "https://api.github.com/repos/${ORG_NAME}/${repo}/dependabot/alerts?per_page=${per_page}&page=${page}")
        if [[ $? -ne 0 ]]; then
          echo "Error fetching alerts for repository: $repo" >&2
          return 1
        fi

        alert_data=$(echo "$response" | jq -c '.[]')
        if [[ -z "$alert_data" ]]; then
          break
        fi

        alerts+=($alert_data)
        ((page++))
      done

      echo "${alerts[@]}"
    }

    # Loop through each repository and fetch Dependabot alerts
    for REPO in $REPOS; do
      ALERTS=$(fetch_all_alerts "$REPO")
      if [[ $? -ne 0 ]]; then
        echo "Error fetching alerts for repository: $REPO" >&2
        continue
      fi

      # Check if there are alerts
      if [[ ${#ALERTS[@]} -gt 0 ]]; then
        # Extract required data and append to the CSV file
        for ALERT in "${ALERTS[@]}"; do
          echo "$ALERT" | jq -r --arg repo "$REPO" '[ 
              .number, 
              (.security_advisory.identifiers[] | select(.type == "CVE") | .value // "CVE not available"), 
              .html_url, 
              $repo, 
              .security_advisory.severity 
          ] | @csv' >> "$OUTPUT_CSV"
        done
      fi
    done

    echo "Dependabot alerts have been written to $OUTPUT_CSV"
